/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import entity.Cargo;
import service.CargoService;
import entity.EnumOperacaoBanco;
import exception.RegistroExistenteException;
import exception.RegistroNaoExistenteException;
import java.awt.HeadlessException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import util.UtilComponentes;
/**
 *
 * @author CroK
 */
public class CargoCadastroUI extends javax.swing.JInternalFrame {
     private JDesktopPane jDesktopPane;
    
    private DashboardUI dashboardUI;
    
    private boolean editandoCargo;
    
    private Cargo cargoEmEdicao;
    
    private CargoService cargoService;
    
    /**
     * Creates new form CargosCadastroUI
     */
    public CargoCadastroUI() throws Exception{
        initComponents();
        inicializarComponentes();
    }
    public CargoCadastroUI(Cargo cargoEmEdicao) throws Exception {
        this();
        
//      Defini o nome do títilo da tela.
        dashboardUI.setJLabelNomeTela("Editar Cargo");     

//      Alterar o texto do botão incluir para salvar.
        jButtonIncluirCargos.setText("Salvar");
        
        editandoCargo = true;
        
        this.cargoEmEdicao = cargoEmEdicao;
        
        preencherCamposDaTelaComCargoEditando(cargoEmEdicao);
    }    
    private void inicializarComponentes() throws Exception {
        
//      Obtém a instancia do dashboard, inicializa o título da janela.
        dashboardUI =  DashboardUI.getInstance();
        
//      Defini o nome do títilo da tela.
        dashboardUI.setJLabelNomeTela("Cadastrar Cargo");
        
//      Obtém a instancia do JDesktopPane
        jDesktopPane = dashboardUI.getJDesktopPrincipal();
        
//      Maximiza o JInternalFrame para o tamanho do JDesktopPane (pai);
        UtilComponentes.maximizarJInternalFrame(this);
    }
     public void preencherCamposDaTelaComCargoEditando(Cargo cargoEmEdicao) {
        jTextFieldTextoPesquisa.setText(cargoEmEdicao.getDescricao());
    }


    /**
     * This method is called clone within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelCargo = new javax.swing.JLabel();
        jTextFieldTextoPesquisa = new javax.swing.JTextField();
        jButtonSair = new javax.swing.JButton();
        jButtonIncluirCargos = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        jLabelCargo.setText("Cargo");

        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jButtonIncluirCargos.setText("incluir");
        jButtonIncluirCargos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIncluirCargosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonIncluirCargos, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelCargo)
                            .addComponent(jTextFieldTextoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 387, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabelCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldTextoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 344, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSair)
                    .addComponent(jButtonIncluirCargos))
                .addGap(71, 71, 71))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonIncluirCargosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIncluirCargosActionPerformed
       
        String nome = jTextFieldTextoPesquisa.getText().trim();
        
        if (nome.equals("")) {
            JOptionPane.showMessageDialog(this, "Campo nome não pode ser nulo.");
            jTextFieldTextoPesquisa.setFocusable(true);
            return;
        }
        
        try {
            cargoService    = new CargoService();
            
            if (!this.editandoCargo) {
                Cargo cargo     = new Cargo(nome,true);

                cargoService.incluir(cargo);
                
                finalizarAlteracoes(EnumOperacaoBanco.INCLUIR);     
                
            } else {
//              Busca no banco de dados (arquivo txt) o registro.
                Cargo cargoBanco = cargoService.consultar(this.cargoEmEdicao);
               
                if (cargoBanco == null) {
                    throw new RegistroNaoExistenteException();
                }
                
//              Insere os novos valores
                cargoBanco.setDescricao(jTextFieldTextoPesquisa.getText());

                cargoService.alterar(cargoBanco);
                
                finalizarAlteracoes(EnumOperacaoBanco.EDITAR);
            } 
         
        } catch (RegistroExistenteException e) {
            UtilComponentes.limparCampos(jTextFieldTextoPesquisa);
            
             JOptionPane.showMessageDialog(this, "Cadastro já existente.",
                    "Cadastro / Edição de Cargo", JOptionPane.DEFAULT_OPTION);
             
            SwingUtilities.invokeLater(new Runnable() {
              public void run() {
                jTextFieldTextoPesquisa.requestFocus();
              }
            });                
             
        } catch (RegistroNaoExistenteException e) {
            UtilComponentes.limparCampos(jTextFieldTextoPesquisa);
            
             JOptionPane.showMessageDialog(this, "Cadastro NÃO existente para edição.",
                    "Cadastro / Edição de Autor", JOptionPane.DEFAULT_OPTION);
             
            SwingUtilities.invokeLater(new Runnable() {
              public void run() {
                jTextFieldTextoPesquisa.requestFocus();
              }
            });                
        } catch (Exception e) {
              JOptionPane.showMessageDialog(this, "Ocorreu um erro ao incluir/salvar o cargo. Entre em contato com nosso suporte.",
                    "Cadastro / Edição de Autor", JOptionPane.DEFAULT_OPTION);
        }
    }                                                         

    protected void finalizarAlteracoes(EnumOperacaoBanco operacao) throws HeadlessException, Exception {
        UtilComponentes.limparCampos(jTextFieldTextoPesquisa);
        
        if (EnumOperacaoBanco.INCLUIR.equals(operacao)){
            JOptionPane.showMessageDialog(this, "Cargo incluído com sucesso!");

            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    jTextFieldTextoPesquisa.requestFocus();
                }
            });      
            
        } else if (EnumOperacaoBanco.EDITAR.equals(operacao)){
            JOptionPane.showOptionDialog(null, "Cargo alterado com sucesso!", "Cadastro de Autor!", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
               
            this.dispose();

            dashboardUI.setJLabelNomeTela("Cargos");

            jDesktopPane.remove(this);

            try {
                abrirTelaCargos();            
            } catch (Exception ex) {
                Logger.getLogger(CargosUI.class.getName()).log(Level.SEVERE, null, ex);
                jDesktopPane.add(new DashboardUI());
            }                  
        }
    

    }//GEN-LAST:event_jButtonIncluirCargosActionPerformed

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
    this.dispose();
        
        dashboardUI.setJLabelNomeTela("Cargos");
        
        jDesktopPane.remove(this);
        
        try {
            abrirTelaCargos();            
            
        } catch (Exception ex) {
            Logger.getLogger(CargosUI.class.getName()).log(Level.SEVERE, null, ex);
            try {
                jDesktopPane.add(new DashboardUI());
            } catch (Exception ex1) {
                Logger.getLogger(CargoCadastroUI.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }        
    }                                           

    protected void abrirTelaCargos() throws Exception {
        CargosUI cargosUI = new CargosUI();
        
//      Adiciona a pilha de do JDesktopPane o JInternalFrame LivrosPrincipalUI.
        jDesktopPane.add(cargosUI);
        
//      Remove barra de título e borda da janela
        try {
            UtilComponentes.removerBarraTituloEBorda(cargosUI);
        } catch (Exception ex) {
            Logger.getLogger(DashboardUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
//      Mostra a tela LivrosPrincipal.
        cargosUI.show();
    
    }//GEN-LAST:event_jButtonSairActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonIncluirCargos;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JLabel jLabelCargo;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextFieldTextoPesquisa;
    // End of variables declaration//GEN-END:variables
}
